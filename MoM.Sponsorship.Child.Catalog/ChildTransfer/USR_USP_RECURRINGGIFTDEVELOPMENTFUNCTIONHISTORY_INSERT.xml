<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="a58cf833-13c2-405c-8a0f-9bdc09303320"
	Name="USR_USP_RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY_INSERT"
	Description="Sproc to Insert a row into RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY for a given Sponsorship Opportunity"
	Author="Memphis Sellers"
	SPName="USR_USP_RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY_INSERT"
	>

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY_INSERT(
    @CHANGEAGENTID uniqueidentifier,                      -- id of the calling chageagent/user, can be null will look it up
    @SPONSORSHIPOPPORTUNITYID uniqueidentifier,           -- sponsorshipopportunityid of the child, can not be null
    @REVENUEDEVELOPMENTFUNCTIONDESCRIPTION nvarchar(100)  -- the description of the revenue function that is to be inserted, can not be null!
)
as
begin
	begin try
		if @SPONSORSHIPOPPORTUNITYID is null
			raiserror('@SPONSORSHIPOPPORTUNITYID cannot be null',16,1);	
			
    if @REVENUEDEVELOPMENTFUNCTIONDESCRIPTION is null
		raiserror('@REVENUEDEVELOPMENTFUNCTIONDESCRIPTION cannot be null',16,1);	
      
      
	-- do work
  declare @REVENUEDEVELOPMENTFUNCTIONCODEID uniqueidentifier

  -- get the REVENUEDEVELOPMENTFUNCTIONCODE that we need which is Designation:
  select @REVENUEDEVELOPMENTFUNCTIONCODEID = ID
  from dbo.REVENUEDEVELOPMENTFUNCTIONCODE
  where UPPER([DESCRIPTION]) = UPPER(@REVENUEDEVELOPMENTFUNCTIONDESCRIPTION) -- 'Designation'
  
  -- if we don't have a revenue development function code, we can not continue:
  if @REVENUEDEVELOPMENTFUNCTIONCODEID is null
	raiserror('Unable to find a REVENUEDEVELOPMENTFUNCTIONCODEID for the given Description!',16,1);	
    

  declare @statusCodePending tinyint = 0
  declare @statusCodeActive tinyint = 1 
  declare @statusCodeInactive tinyint = 2
  --declare @CHANGEAGENTID uniqueidentifier
  declare @REVENUEID uniqueidentifier
  --declare @sponsorshipOpportunityID uniqueidentifier --= 'E2E083E4-E485-4C9D-A5DF-20CE6713A2C2'  -- this is being set manually for this sample code (same as SponsorshipOpportunityChild ID)

  if @CHANGEAGENTID is null
	  exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;
	
  -- this will be passed into sproc:
  --select @sponsorshipOpportunityID = ID 
  --from dbo.SPONSORSHIPOPPORTUNITYCHILD
  --where LASTNAME='Testing'
  --and FIRSTNAME = 'Sally'

  --get the revenue id for this sponsorship:
  select      @REVENUEID = REVENUESPLIT.REVENUEID
    from      dbo.SPONSORSHIP
    join      dbo.REVENUESPLIT on REVENUESPLIT.ID = SPONSORSHIP.REVENUESPLITID
    where     SPONSORSHIP.SPONSORSHIPOPPORTUNITYID = @sponsorshipOpportunityID 
    and       SPONSORSHIP.STATUSCODE = @statusCodeActive
    --print @REVENUEID;
  
  -- only do the insert if we have a sponsorship:
  if @REVENUEID is not null
  begin
  -- 
    declare @AMOUNT money;                     -- where to get this?
    declare @DATE date = getdate();
    declare @BASECURRENCYID uniqueidentifier;          -- where to get this?
    declare @BASEEXCHANGERATEID uniqueidentifier;      -- where to get this?
    declare @TRANSACTIONCURRENCYID uniqueidentifier;   -- where to get this?
    declare @BASEAMOUNT money;
    declare @ORGANIZATIONCURRENCYID uniqueidentifier;
    declare @ORGANIZATIONAMOUNT money;
    declare @ORGANIZATIONEXCHANGERATEID uniqueidentifier;
    declare @BASETOORGANIZATIONEXCHANGERATE uniqueidentifier;
    declare @FREQUENCYCODE tinyint;
    declare @SOURCECODE nvarchar(50);
    declare	@FINDERNUMBER bigint;
    declare	@APPEALID uniqueidentifier;
    declare	@MAILINGID uniqueidentifier;
    declare	@CHANNELCODEID uniqueidentifier;

    -- This query populates the necessary parameters: amount, basecurrencyid, baseexchangerateid, transactioncurrencyid
    select
		    @DATE = cast(REVENUE.DATE as datetime),
		    @AMOUNT = REVENUE.TRANSACTIONAMOUNT,
		    @TRANSACTIONCURRENCYID = REVENUE.TRANSACTIONCURRENCYID,
		    @BASECURRENCYID = V.BASECURRENCYID,
		    @BASEEXCHANGERATEID = REVENUE.BASEEXCHANGERATEID,
		    @SOURCECODE = REVENUE_EXT.SOURCECODE,
		    @FINDERNUMBER = REVENUE_EXT.FINDERNUMBER,
		    @APPEALID = REVENUE_EXT.APPEALID,
		    @MAILINGID = REVENUE_EXT.MAILINGID,
		    @CHANNELCODEID = REVENUE_EXT.CHANNELCODEID
	    from 
		    dbo.FINANCIALTRANSACTION REVENUE
		    inner join dbo.REVENUE_EXT on REVENUE.ID = REVENUE_EXT.ID
		    left outer join  dbo.V_BASECURRENCYFORFINANCIALTRANSACTION_I V with (noexpand) on REVENUE.ID = V.FINANCIALTRANSACTIONID
		    outer apply dbo.UFN_CONSTITUENT_DISPLAYNAME(REVENUE.CONSTITUENTID) NF
		    inner join dbo.CURRENCY on CURRENCY.ID = V.BASECURRENCYID
		    left join dbo.CURRENCYEXCHANGERATE on CURRENCYEXCHANGERATE.ID = REVENUE.BASEEXCHANGERATEID
	    where 
		    REVENUE.ID = @REVENUEID and REVENUE.TYPECODE = 2 and REVENUE.DELETEDON is null;
		
    -- populate the currency vars		   
    exec dbo.USP_CURRENCY_GETCURRENCYVALUES
	    @AMOUNT,
	    @DATE,
	    @BASECURRENCYID,
	    @BASEEXCHANGERATEID,
	    @TRANSACTIONCURRENCYID output,
	    @BASEAMOUNT output,
	    @ORGANIZATIONCURRENCYID output,
	    @ORGANIZATIONAMOUNT output,
	    @ORGANIZATIONEXCHANGERATEID output,
	    1,
	    @BASETOORGANIZATIONEXCHANGERATE;	 
    --print N'@TRANSACTIONCURRENCYID: ' + CAST(@TRANSACTIONCURRENCYID as nvarchar(100));
    --print N'@BASEAMOUNT: ' + CAST(@BASEAMOUNT as nvarchar(50));
    --print N'@ORGANIZATIONCURRENCYID ' + CAST(@ORGANIZATIONCURRENCYID as nvarchar(100));
    --print N'@ORGANIZATIONEXCHANGERATEID ' + CAST(@ORGANIZATIONEXCHANGERATEID as nvarchar(100)) ;   
   

    select top 1
	    @FREQUENCYCODE = FREQUENCYCODE
    from dbo.REVENUESCHEDULE
    where ID = @REVENUEID;
    --print @FREQUENCYCODE;

    -- perform this insert so the FK is there:
    declare @REVENUEDEVELOPMENTFUNCTIONID uniqueidentifier;
    set @REVENUEDEVELOPMENTFUNCTIONID = newid();

    insert into dbo.REVENUEDEVELOPMENTFUNCTION (
	    ID,
	    REVENUEID,
	    REVENUEDEVELOPMENTFUNCTIONCODEID,
	    ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED
    )
    values (
	    @REVENUEDEVELOPMENTFUNCTIONID,
	    @REVENUEID,
	    @REVENUEDEVELOPMENTFUNCTIONCODEID,
	    @CHANGEAGENTID, @CHANGEAGENTID, GETDATE(), GETDATE()
    )

    --get the next sequence value:
    declare @SEQUENCE int;
    select @SEQUENCE =  max(RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY.SEQUENCE)
    from dbo.RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY
    where RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY.REVENUEID = @REVENUEID

    IF @SEQUENCE IS NULL 
      set @SEQUENCE = 1
    ELSE
      set @SEQUENCE = @SEQUENCE + 1

    --print @SEQUENCE;

    --OK, now FINALLY perform the insert!
    insert into dbo.RECURRINGGIFTDEVELOPMENTFUNCTIONHISTORY (
			    ID,
			    REVENUEID,
			    REVENUEDEVELOPMENTFUNCTIONID,
			    SEQUENCE,
			    TRANSACTIONDATE,
			    TRANSACTIONAMOUNT,
			    TRANSACTIONCURRENCYID,
			    AMOUNT,
			    BASECURRENCYID,
			    BASEEXCHANGERATEID,
			    ORGANIZATIONAMOUNT,
			    ORGANIZATIONEXCHANGERATEID,
			    FREQUENCYCODE,
			    PREVIOUSTRANSACTIONAMOUNT,
			    PREVIOUSAMOUNT,
			    PREVIOUSBASEEXCHANGERATEID,
			    PREVIOUSORGANIZATIONAMOUNT,
			    PREVIOUSORGANIZATIONEXCHANGERATEID,
			    PREVIOUSFREQUENCYCODE,
			    SOURCECODE,
			    FINDERNUMBER,
			    APPEALID,
			    MAILINGID,
			    CHANNELCODEID,
			    ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED
		    )
		    select
			    newid(),
			    @REVENUEID,
			    @REVENUEDEVELOPMENTFUNCTIONID,
                @SEQUENCE,
			    GETDATE(),
			    @AMOUNT,
			    @TRANSACTIONCURRENCYID,
			    @BASEAMOUNT,
			    @BASECURRENCYID,
			    @BASEEXCHANGERATEID,
			    @ORGANIZATIONAMOUNT,
			    @ORGANIZATIONEXCHANGERATEID,
			    @FREQUENCYCODE,
			    REVENUE.TRANSACTIONAMOUNT,
			    REVENUE.BASEAMOUNT,
			    REVENUE.BASEEXCHANGERATEID,
			    REVENUE.ORGAMOUNT,
			    REVENUE.ORGEXCHANGERATEID,
			    REVENUESCHEDULE.FREQUENCYCODE,
			    @SOURCECODE,
			    @FINDERNUMBER,
			    @APPEALID,
			    @MAILINGID,
			    @CHANNELCODEID,
			    @CHANGEAGENTID, @CHANGEAGENTID, GETDATE(), GETDATE()
		    from dbo.FINANCIALTRANSACTION REVENUE
		    inner join dbo.REVENUESCHEDULE on REVENUESCHEDULE.ID = REVENUE.ID
		    where REVENUE.ID = @REVENUEID	
  end   -- end of if 
  
	end try
	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1	
	end catch
  
  return 0;  
end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
