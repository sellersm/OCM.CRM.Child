<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="4f2f1a96-ab58-47fd-95ec-54752f26a21e"
	Name="USR_USP_CHILDQUOTA_PROCESSWAITINGLIST"
	Description="This is used to in the business process to check waiting list children"
	Author="Cary Mayeda"
	SPName="USR_USP_CHILDQUOTA_PROCESSWAITINGLIST"
	>

	<!-- 
	Remarks:    

	History:
	Date            Modified By     Comments
	02-Jul-2012		CMayeda			Initial Version
	-->

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_CHILDQUOTA_PROCESSWAITINGLIST (
	@changeAgentID uniqueidentifier,		-- Used to specify change agent for ChangedByID and AddedByID fields
	@successTableName nvarchar(128),        -- Table Name to insert children successfuly registered, pass empty string if no table needs to be populated
	@exceptionTableName nvarchar(128),		-- Table Name to insert exceptions, pass empty string if no table needs to be populated
	@successCount int = 0 output,			-- Number of children successfully registered
	@exceptionCount int = 0 output			-- Number of exceptions - this isn't always the number children, because only one row is entered for a lock failure
)

as
begin
	-- Get ChangeAgent if none was passed into the sproc
  	if @changeAgentID is null  
	    exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output

	declare @changeAgentUserName nvarchar(128)
	select @changeAgentUserName = USERNAME from dbo.CHANGEAGENT where ID = @changeAgentID

	
	declare @currentDateTime datetime							-- Used to store the current Date / Time
	set @currentDateTime  = getdate()


	-- ** Had to use temp tables instead of just referencing the table vars because of permission issues when called from the business process
	-- ** The EXECUTE permission was denied on the object 'USR_UDT_CHILDIDLIST'

	-- Used to insert children successfully registered into the Success Table for project quotas
	declare @insertSuccessSQL nvarchar(max) = ''
	if @successTableName <> ''
		set @insertSuccessSQL  = 'insert ' + @successTableName + ' select @projectID, @countryID, SPONSORSHIPOPPORTUNITYCHILDID from #registeredChildren' -- @childList'
	declare @insertSuccessSQLParms nvarchar(255) = '@projectID uniqueidentifier, @countryID uniqueidentifier'--, @childList dbo.USR_UDT_CHILDIDLIST readonly'

-- Used to insert exceptions into the Exception Table
	declare @insertExceptionsSQL nvarchar(max) = ''
	if @exceptionTableName <> '' 
		set	@insertExceptionsSQL = 'insert ' + @exceptionTableName + ' select @projectID, @countryID, SPONSORSHIPOPPORTUNITYCHILDID, SPONSORSHIPREASONID from #ineligibleChildren'--@childList'
	declare @insertExceptionsSQLParm nvarchar(255) = '@projectID uniqueidentifier, @countryID uniqueidentifier'--, @childList dbo.USR_UDT_CHILDIDLISTWITHREASON readonly'
	
	
	
	-- Used to get the count of successfully registered children
	declare @countSuccessSQL nvarchar(max) = 'select @successCount=count(*) from ' + @successTableName 
	declare @countSuccessSQLParms nvarchar(255) = '@successCount int output'
	
	-- Used to get the count of exceptions
	declare @countExceptionSQL nvarchar(max) = 'select @exceptionCount=count(*) from ' + @exceptionTableName 
	declare @countExceptionSQLParms nvarchar(255) = '@exceptionCount int output'
	
	-- Used to insert a single exception into the Exception Table
	declare @insertSingleExceptionSQL nvarchar(max) = 'insert ' + @exceptionTableName + ' select @projectID, @countryID, @childID, @exceptionReason'
		
	declare @insertSingleExceptionSQLParm nvarchar(255) = '@projectID uniqueidentifier, @countryID uniqueidentifier, @childID uniqueidentifier, @exceptionReason nvarchar(255)'	

	declare @lockMaxAttempts tinyint = 5						-- How many times to retry attempting acquiring a lock
	declare @lockDelayString char(8) = '00:00:02'				-- How long to wait in between lock attempts.  Delay uses a string formatted as time - hh:mm:ss
	

	declare @childProjectID uniqueidentifier					-- Used to store the child project being processed 

		-- Used to store the children on the waiting list
	declare @WaitingListChildren USR_UDT_WAITINGLISTCHILDREN
	insert @WaitingListChildren  
	select childProjectID,
		   sponsorshipOpportunityChildID,
		   dateAdded 
	  from dbo.USR_UFN_CHILDQUOTA_GETWAITINGLIST ()

 		declare @lockFailed table (quotaType tinyint,  -- 0 = project, 1 = country
					   objectID uniqueidentifier)

	declare @lockObjectID uniqueidentifier
	declare @objectLocked bit
	
	-- Cursor of projects included in the waiting list
	declare waitingListCursor cursor for
	select distinct childProjectID from @WaitingListChildren

	open waitingListCursor 
	fetch next from waitingListCursor 
		into @childProjectID
		
	-- Process each project on the waiting list
	while @@FETCH_STATUS = 0
	begin
		-- ** get quota type
		
		-- Try to lock the current child project
		if 0=0 -- ** child project
			set @lockObjectID = @childProjectID
		else
			set @lockObjectID = @childProjectID  -- ** CHANGE TO COUNTRYID
		
		set @objectLocked = 0
		declare @lockAttempts int = 0
		while @lockAttempts < @lockMaxAttempts and @objectLocked = 0
		begin
			set @lockAttempts = @lockAttempts + 1
			set @objectLocked = 1
			begin try
				exec dbo.USR_USP_BATCHLOCKINSERT @lockObjectID, @currentDateTime, @changeAgentUserName
			end try
			begin catch
				set @objectLocked = 0
				if @lockAttempts < @lockMaxAttempts
					waitfor delay @lockDelayString
			end catch	
		end 
	
		if @objectLocked = 0
		begin
			-- Child Project could not be locked, so we need to log this in the output parm @lockFailed and the business process exception table
			if 0=0 -- **child project
			begin
				insert @lockFailed
				select 0, @childProjectID  -- 0 = Project Quota
			
				if @exceptionTableName <> ''	-- If an exception table was specific, insert a row for the lock failure
					exec sp_executesql @insertSingleExceptionSQL, @insertSingleExceptionSQLParm, @projectID=@childProjectID,@countryID=NULL,@childID=NULL, @exceptionReason='Child Project could not be locked'
			end
			else
			begin
				insert @lockFailed
				select 1, @childProjectID  -- 0 = Country Quota  ** CHANGE TO COUNTRY
				if @exceptionTableName <> ''	-- If an exception table was specific, insert a row for the lock failure
					exec sp_executesql @insertSingleExceptionSQL, @insertSingleExceptionSQLParm, @projectID=@childProjectID,@countryID=NULL,@childID=NULL, @exceptionReason='Country could not be locked' --** CHANGE TO COUNTRY
			end
		end 
		else
		begin
			if 0=0 -- **child project
				exec dbo.USR_USP_CHILDQUOTA_PROCESS_PROJECT @childProjectID, @WaitingListChildren, @changeAgentID, @insertSuccessSQL, @insertSuccessSQLParms, @insertExceptionsSQL, @insertExceptionsSQLParm

			else
				exec dbo.USR_USP_CHILDQUOTA_PROCESS_COUNTRY @childProjectID, @WaitingListChildren, @changeAgentID, @insertSuccessSQL, @insertSuccessSQLParms, @insertExceptionsSQL, @insertExceptionsSQLParm  

			-- Unlock project / country
			exec dbo.USR_USP_DELETEBATCHLOCK @lockObjectID, @changeAgentUserName
			
		end
		
		fetch next from waitingListCursor 
		into @childProjectID

	end
	

	close waitingListCursor
	deallocate waitingListCursor


	if @successTableName <> ''
		exec sp_executesql @countSuccessSQL, @countSuccessSQLParms, @successCount=@successCount output
	
	if @exceptionTableName <> ''
		exec sp_executesql @countExceptionSQL, @countExceptionSQLParms, @exceptionCount=@exceptionCount output

	select quotaType, objectID from @lockFailed 					   

	return 0

end

		]]>
	</CreateProcedureSQL>
	
</SQLStoredProcedureSpec>
