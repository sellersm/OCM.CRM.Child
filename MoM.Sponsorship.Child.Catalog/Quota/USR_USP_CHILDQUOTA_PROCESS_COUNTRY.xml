<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="611429c2-3b04-4323-a16b-17dbcf844afb"
	Name="USR_USP_CHILDQUOTA_PROCESS_COUNTRY"
	Description="REPLACE_WITH_DESCRIPTION"
	Author="Cary Mayeda"
	SPName="USR_USP_CHILDQUOTA_PROCESS_COUNTRY"
	>

	<!-- 
	Remarks:    Assumption - There cannot be a combination of project and country quota within the same country.  
							 It is either country quota for all project, or it's project quota for all projects.
							 
				

	History:
	Date            Modified By     Comments
	10-Jul-2012		CMayeda			Initial Version
	-->

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_CHILDQUOTA_PROCESS_COUNTRY (
	@childProjectID uniqueidentifier,
	@WaitingListChildren USR_UDT_WAITINGLISTCHILDREN readonly, 
	@changeAgentID uniqueidentifier,					-- Used to specify change agent for ChangedByID and AddedByID fields
	@insertSuccessSQL nvarchar(max),
	@insertSuccessSQLParms nvarchar(255),
	@insertExceptionsSQL nvarchar(max),
	@insertExceptionsSQLParm nvarchar(255))
as
begin
	declare @childProjectIneligibleReasonID uniqueidentifier	-- Used to store the Sponsorship Reason ID if a child project is not eligible
	declare @quotaRoom int										-- How many children can be registered for a project
	

	-- Tables used to pass a list of children to other sprocs 
	declare @ChildListToRegister dbo.USR_UDT_CHILDIDLIST
	declare @ChildListIneligible dbo.USR_UDT_CHILDIDLIST
	declare @ChildListIneligibleWithReason dbo.USR_UDT_CHILDIDLISTWITHREASON
	

	-- Sponsorship Reason ID for 'Waiting List - maximum quota reached'
	begin try
		declare @waitingListMaximumQuotaReachedID uniqueidentifier
		select @waitingListMaximumQuotaReachedID = ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - maximum quota reached'
		if @waitingListMaximumQuotaReachedID is null
			RAISERROR 1000000 'Couldn''t find the "Waiting List - maximum quota reached" Sponsorship Reason'		
		end try
	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1	

	end catch
	
	
	-- Get ChangeAgent if none was passed into the sproc
  	if @changeAgentID is null  
	    exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output

	
	
	
	
	begin
		-- Child Project was locked
			
		-- Clear child list tables
		delete @ChildListToRegister 
		delete @ChildListIneligible 
		delete @ChildListIneligibleWithReason
			
		if dbo.USR_UFN_CHILDPROJECT_QUOTAOVERRIDE (@childProjectID) = 1
		begin
			-- Quota Override trigger is Yes, so add all waiting list kids
			insert @ChildListToRegister
			select sponsorshipOpportunityChildID
				from @WaitingListChildren  
				where childProjectID = @childProjectID 

			exec dbo.USR_USP_CHILDREN_REGISTER @ChildListToRegister, @changeAgentID
				
		end
			
		else
		begin
			-- Quota Override trigger is No, so we need to check if the project can take new kids
			exec dbo.USR_USP_CHILDPROJECT_DETERMINEQUOTAELIGIBILITY @childProjectID, @childProjectIneligibleReasonID output
	
			if @childProjectIneligibleReasonID is not null
			begin
				-- Project cannot take new kids, so all the kids need to be added to the waiting list
								
				insert @ChildListIneligible 
				select sponsorshipOpportunityChildID from @WaitingListChildren where childProjectID = @childProjectID
				
				exec dbo.USR_USP_CHILDREN_SETINELIGIBLE @ChildListIneligible, @childProjectIneligibleReasonID, @changeAgentID
					
				insert @ChildListIneligibleWithReason
				select sponsorshipOpportunityChildID, @childProjectIneligibleReasonID from @ChildListIneligible
			end
			else
			begin
				
				-- Check Quota
				set @quotaRoom = dbo.USR_UFN_CHILDPROJECT_QUOTAVARIANCE (@childProjectID)
				if @quotaRoom > 0 
				begin
					insert @ChildListToRegister
					select top (@quotaRoom) sponsorshipOpportunityChildID 
						from @WaitingListChildren  
						where childProjectID = @childProjectID 
		  				order by dateAdded 

					exec USR_USP_CHILDREN_REGISTER @ChildListToRegister, @changeAgentID

					insert @ChildListIneligible 
					select sponsorshipOpportunityChildID 
						from @WaitingListChildren  wlc
						where wlc.childProjectID = @childProjectID 
						and not exists (select SPONSORSHIPOPPORTUNITYCHILDID from @ChildListToRegister where SPONSORSHIPOPPORTUNITYCHILDID = wlc.sponsorshipOpportunityChildID)
				 
					exec dbo.USR_USP_CHILDREN_SETINELIGIBLE @ChildListIneligible, @waitingListMaximumQuotaReachedID, @changeAgentID				

					insert @ChildListIneligibleWithReason
					select sponsorshipOpportunityChildID, @waitingListMaximumQuotaReachedID from @ChildListIneligible
				   
				end
				
				else
				begin
					--print 'No room for kids'
					--select sponsorshipOpportunityChildID from @WaitingListChildren where childProjectID = @childProjectID
					insert @ChildListIneligible 
					select sponsorshipOpportunityChildID from @WaitingListChildren where childProjectID = @childProjectID
							
					exec dbo.USR_USP_CHILDREN_SETINELIGIBLE @ChildListIneligible, @waitingListMaximumQuotaReachedID, @changeAgentID				
	
					insert @ChildListIneligibleWithReason
					select sponsorshipOpportunityChildID, @waitingListMaximumQuotaReachedID from @ChildListIneligible
				end
			end
		end


		-- ** Had to use temp tables instead of just referencing the table vars because of permission issues when called from the business process
		-- ** The EXECUTE permission was denied on the object 'USR_UDT_CHILDIDLIST'

		-- Write Successes to Output table if it was specified
		if @insertSuccessSQL <> ''
		begin
			select * into #registeredChildren from @ChildListToRegister
			exec sp_executesql @insertSuccessSQL, @insertSuccessSQLParms, @projectID=@childProjectID, @countryID=NULL--, @ChildList=@ChildListToRegister
			drop table #registeredChildren 
		end
			
		-- Write exceptions to Output table if it was specified
		if @insertExceptionsSQL <> ''	
		begin
			select * into #ineligibleChildren from @ChildListIneligibleWithReason
			exec sp_executesql @insertExceptionsSQL, @insertExceptionsSQLParm, @projectID=@childProjectID, @countryID=NULL--, @childList=@ChildListIneligibleWithReason
			drop table #ineligibleChildren 
		end

			
	END
end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
