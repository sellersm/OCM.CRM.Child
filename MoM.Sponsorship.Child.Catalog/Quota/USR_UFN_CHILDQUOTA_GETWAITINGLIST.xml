<SQLFunctionSpec
	xmlns="bb_appfx_sqlfunction"
	xmlns:common="bb_appfx_commontypes" 
	ID="62d1b050-27ca-4481-8cb5-23af239ac184"
	Name="USR_UFN_CHILDQUOTA_GETWAITINGLIST"
	Description="Get a table of children awaiting registration - both Waiting List and Batch Commit"
	Author="Cary Mayeda"
	DBFunctionName="USR_UFN_CHILDQUOTA_GETWAITINGLIST">
	
	<!-- 
	Remarks:    This will return 0 rows if either the Waiting List or Batch Commit - Locked Failed sponsorship reason ids are not found.
				The table is sorted by project and date added.  There is no preference for waiting list children or batch commit kids.
				The reason for this is that the "Batch Commit - locked failed" error indicates that the child could not be checked to determine 
				if they should be registered or placed on the waiting list, because the lock of the project failed when processing the waiting list 
				when committing the batch.
				
				Initially the waiting list and batch commit kids would be processed all at once, so the waiting list kids needed to be handled first.
				However, there wasn't a way to make the call after all kids were added to CRM, so the waiting list process is called first and then
				each child is checked separately prior to entry.

	History:
	Date            Modified By     Comments
	02-May-2012		CMayeda			Initial Version
	-->

	<CreateFunctionSQL>
		<![CDATA[
create function dbo.USR_UFN_CHILDQUOTA_GETWAITINGLIST()
returns @awaitingKids table
		(
		 childProjectID uniqueidentifier,
		 sponsorshipOpportunityChildID uniqueidentifier,
		 dateAdded datetime
--		 reasonType tinyint,
--		 ineligibleReasonID uniqueidentifier
		)
with execute as caller
as begin

	declare @numberSponsorshipReasons tinyint		-- The number of sponsorship reasons (waiting list and batch commit) that should be checked to include children with that sponsorship reason in the returned set of children
	set @numberSponsorshipReasons = 6 
	
	declare @sponsorhipReasonsToInclude table
		(
			sponsorshipReasonID uniqueidentifier
			--reasonType tinyint					-- Not needed anymore - This is used to sort the waiting list kids before the batch commit kids
													--   0 - A waiting list reason
													--   1 - batch commit reason
		)
	
	-- Waiting List reasons - finding these individually instead of all the start with 'Waiting List' in order to minimize accidental data entry issues
	insert @sponsorhipReasonsToInclude
	select ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - market demand'
	
	insert @sponsorhipReasonsToInclude
	select ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - maximum quota reached'
	
	insert @sponsorhipReasonsToInclude
	select ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - not accepting new children'
	
	insert @sponsorhipReasonsToInclude
	select ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - project performance'

	insert @sponsorhipReasonsToInclude
	select ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - project status'

	-- Batch Commit reason 
	insert @sponsorhipReasonsToInclude
	select ID from SPONSORSHIPREASON where lower (REASON) = 'batch commit - lock failed'
	
	-- Only return kids if you got both reason ids
	declare @reasonCount tinyint
	select @reasonCount = count(*) from @sponsorhipReasonsToInclude
	
	if @reasonCount > 0 --  = @numberSponsorshipReasons  ****************  NEED TO SET THIS WHEN DEPLOYING TO DEV ***********************
		insert	@awaitingKids
		select  sl.FIELDOFFICEID,
				so.ID,
				so.DATEADDED
--				reasonstoinclude.reasonType as WAITINGLISTREASONTYPE,
--				so.SPONSORSHIPREASONID
		  from dbo.SPONSORSHIPOPPORTUNITY so
		  join dbo.USR_CHILDEXTENSION ce on
					so.ID = ce.SPONSORSHIPOPPORTUNITYCHILDID
	      join dbo.SPONSORSHIPREASON sr on
					so.SPONSORSHIPREASONID = sr.id
		  join @sponsorhipReasonsToInclude reasonstoinclude on 
					so.SPONSORSHIPREASONID = reasonstoinclude.sponsorshipReasonID
		  join dbo.SPONSORSHIPLOCATION sl on
					so.SPONSORSHIPLOCATIONID = sl.ID 	
					
		 where ce.REGISTRATIONDATE  is null

		order by sl.FIELDOFFICEID, so.DATEADDED
	
	return
	
end
		]]>
	</CreateFunctionSQL>

</SQLFunctionSpec>
