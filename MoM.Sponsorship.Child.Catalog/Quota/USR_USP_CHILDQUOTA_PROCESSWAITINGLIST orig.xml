<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="4f2f1a96-ab58-47fd-95ec-54752f26a21e"
	Name="USR_USP_CHILDQUOTA_PROCESSWAITINGLIST"
	Description="This is used to in the business process to check waiting list children"
	Author="Cary Mayeda"
	SPName="USR_USP_CHILDQUOTA_PROCESSWAITINGLIST"
	>

	
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_CHILDQUOTA_PROCESSWAITINGLIST (
	@changeAgentID uniqueidentifier,		-- Used to specify change agent for ChangedByID and AddedByID fields
	@successTableName nvarchar(128),        -- Table Name to insert children successfuly registered, pass empty string if no table needs to be populated
	@exceptionTableName nvarchar(128),		-- Table Name to insert exceptions, pass empty string if no table needs to be populated
	@successCount int = 0 output,			-- Number of children successfully registered
	@exceptionCount int = 0 output			-- Number of exceptions - this isn't always the number children, because only one row is entered for a lock failure
)

as
begin


	-- Get ChangeAgent if none was passed into the sproc
  	if @changeAgentID is null  
	    exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output

	declare @changeAgentUserName nvarchar(128)
	select @changeAgentUserName = USERNAME from dbo.CHANGEAGENT where ID = @changeAgentID

	declare @lockFailed table (quotaType tinyint,  -- 0 = project, 1 = country
					   objectID uniqueidentifier)

	-- Tables used to pass a list of children to other sprocs 
	declare @ChildListToRegister dbo.USR_UDT_CHILDIDLIST
	declare @ChildListIneligible dbo.USR_UDT_CHILDIDLIST
	declare @ChildListIneligibleWithReason dbo.USR_UDT_CHILDIDLISTWITHREASON
	
	declare @childProjectID uniqueidentifier					-- Used to store the child project being processed 
	declare @childProjectLocked bit								-- Were we able to get a lock on the project?  0 = false, 1 = true
	declare @childProjectIneligibleReasonID uniqueidentifier	-- Used to store the Sponsorship Reason ID if a child project is not eligible
	declare @quotaRoom int										-- How many children can be registered for a project
	declare @currentDateTime datetime							-- Used to store the current Date / Time
	set @currentDateTime  = getdate()
	
	declare @lockMaxAttempts tinyint = 5						-- How many times to retry attempting acquiring a lock
	declare @lockDelayString char(8) = '00:00:02'				-- How long to wait in between lock attempts.  Delay uses a string formatted as time - hh:mm:ss
	
	-- Used to insert a single exception into the Exception Table
	declare @insertSingleExceptionSQL nvarchar(max) = 'insert ' + @exceptionTableName + ' select @projectID, @countryID, @childID, @exceptionReason'
	declare @insertSingleExceptionSQLParm nvarchar(255) = '@projectID uniqueidentifier, @countryID uniqueidentifier, @childID uniqueidentifier, @exceptionReason nvarchar(255)'	

	
	-- ** Had to use temp tables instead of just referencing the table vars because of permission issues when called from the business process
	-- ** The EXECUTE permission was denied on the object 'USR_UDT_CHILDIDLIST'

	-- Used to insert exceptions into the Exception Table
	declare @insertExceptionsSQL nvarchar(max) = 'insert ' + @exceptionTableName + ' select @projectID, @countryID, SPONSORSHIPOPPORTUNITYCHILDID, SPONSORSHIPREASONID from #ineligibleChildren'--@childList'
	declare @insertExceptionsSQLParm nvarchar(255) = '@projectID uniqueidentifier, @countryID uniqueidentifier'--, @childList dbo.USR_UDT_CHILDIDLISTWITHREASON readonly'
	
	-- Used to insert children successfully registered into the Success Table for project quotas
	declare @insertSuccessSQL nvarchar(max) = 'insert ' + @successTableName + ' select @projectID, @countryID, SPONSORSHIPOPPORTUNITYCHILDID from #registeredChildren' -- @childList'
	declare @insertSuccessSQLParms nvarchar(255) = '@projectID uniqueidentifier, @countryID uniqueidentifier'--, @childList dbo.USR_UDT_CHILDIDLIST readonly'
	
	
	-- Used to get the count of successfully registered children
	declare @countSuccessSQL nvarchar(max) = 'select @successCount=count(*) from ' + @successTableName 
	declare @countSuccessSQLParms nvarchar(255) = '@successCount int output'
	
	-- Used to get the count of exceptions
	declare @countExceptionSQL nvarchar(max) = 'select @exceptionCount=count(*) from ' + @exceptionTableName 
	declare @countExceptionSQLParms nvarchar(255) = '@exceptionCount int output'
	

	-- Sponsorship Reason ID for 'Waiting List - maximum quota reached'
	begin try
		declare @waitingListMaximumQuotaReachedID uniqueidentifier
		select @waitingListMaximumQuotaReachedID = ID from SPONSORSHIPREASON where lower (REASON) = 'waiting list - maximum quota reached'
		if @waitingListMaximumQuotaReachedID is null
			RAISERROR 1000000 'Couldn''t find the "Waiting List - maximum quota reached" Sponsorship Reason'		
		end try
	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1	

	end catch
	
	-- Used to store the children on the waiting list
	declare @WaitingListChildren table
			(
			 childProjectID uniqueidentifier,
			 sponsorshipOpportunityChildID uniqueidentifier,
			 dateAdded datetime
			)
	insert @WaitingListChildren  
	select childProjectID,
		   sponsorshipOpportunityChildID,
		   dateAdded 
	  from dbo.USR_UFN_CHILDQUOTA_GETWAITINGLIST ()
 

	-- Cursor of projects included in the waiting list
	declare waitingListCursor cursor for
	select distinct childProjectID from @WaitingListChildren

	open waitingListCursor 
	fetch next from waitingListCursor 
		into @childProjectID
		
	-- Process each project on the waiting list
	while @@FETCH_STATUS = 0
	begin
	
		-- Try to lock the current child project
		
		set @childProjectLocked = 0
		declare @lockAttempts int = 0
		while @lockAttempts < @lockMaxAttempts and @childProjectLocked = 0
		begin
			set @lockAttempts = @lockAttempts + 1
			set @childProjectLocked = 1
			begin try
				exec dbo.USR_USP_BATCHLOCKINSERT @childProjectID, @currentDateTime, @changeAgentUserName
			end try
			begin catch
				set @childProjectLocked = 0
				if @lockAttempts < @lockMaxAttempts
					waitfor delay @lockDelayString
			end catch	
		end 
	
		if @childProjectLocked = 0
		begin
			-- Child Project could not be locked, so we need to log this in the output parm @lockFailed and the business process exception table

			insert @lockFailed
			select 0, @childProjectID  -- 0 = Project Quota
			
			declare @temp nvarchar(255)
			set @temp = N'Project could not be locked'

			if @exceptionTableName <> ''	-- If an exception table was specific, insert a row for the lock failure
				exec sp_executesql @insertSingleExceptionSQL, @insertSingleExceptionSQLParm, @projectID=@childProjectID,@countryID=NULL,@childID=NULL, @exceptionReason='Child Project could not be locked'
		end 
		else
		begin
			-- Child Project was locked
			
			-- Clear child list tables
			delete @ChildListToRegister 
			delete @ChildListIneligible 
			delete @ChildListIneligibleWithReason
			
			if dbo.USR_UFN_CHILDPROJECT_QUOTAOVERRIDE (@childProjectID) = 1
			begin
				-- Quota Override trigger is Yes, so add all waiting list kids
				insert @ChildListToRegister
				select sponsorshipOpportunityChildID
				  from @WaitingListChildren  
				 where childProjectID = @childProjectID 

				exec dbo.USR_USP_CHILDREN_REGISTER @ChildListToRegister, @changeAgentID
				
			end
			
			else
			begin
				-- Quota Override trigger is No, so we need to check if the project can take new kids
				exec dbo.USR_USP_CHILDPROJECT_DETERMINEQUOTAELIGIBILITY @childProjectID, @childProjectIneligibleReasonID output
	
				if @childProjectIneligibleReasonID is not null
				begin
					-- Project cannot take new kids, so all the kids need to be added to the waiting list
								
					insert @ChildListIneligible 
					select sponsorshipOpportunityChildID from @WaitingListChildren where childProjectID = @childProjectID
				
					exec dbo.USR_USP_CHILDREN_SETINELIGIBLE @ChildListIneligible, @childProjectIneligibleReasonID, @changeAgentID
					
					insert @ChildListIneligibleWithReason
					select sponsorshipOpportunityChildID, @childProjectIneligibleReasonID from @ChildListIneligible
				end
				else
				begin
				
					-- Check Quota
					set @quotaRoom = dbo.USR_UFN_CHILDPROJECT_QUOTAVARIANCE (@childProjectID)
					if @quotaRoom > 0 
					begin
						insert @ChildListToRegister
						select top (@quotaRoom) sponsorshipOpportunityChildID 
						  from @WaitingListChildren  
						 where childProjectID = @childProjectID 
		  				 order by dateAdded 

						exec USR_USP_CHILDREN_REGISTER @ChildListToRegister, @changeAgentID

						insert @ChildListIneligible 
						select sponsorshipOpportunityChildID 
						  from @WaitingListChildren  wlc
						 where wlc.childProjectID = @childProjectID 
						   and not exists (select SPONSORSHIPOPPORTUNITYCHILDID from @ChildListToRegister where SPONSORSHIPOPPORTUNITYCHILDID = wlc.sponsorshipOpportunityChildID)
				 
						exec dbo.USR_USP_CHILDREN_SETINELIGIBLE @ChildListIneligible, @waitingListMaximumQuotaReachedID, @changeAgentID				

						insert @ChildListIneligibleWithReason
						select sponsorshipOpportunityChildID, @waitingListMaximumQuotaReachedID from @ChildListIneligible
				   
					end
				
					else
					begin
						--print 'No room for kids'
						--select sponsorshipOpportunityChildID from @WaitingListChildren where childProjectID = @childProjectID
						insert @ChildListIneligible 
						select sponsorshipOpportunityChildID from @WaitingListChildren where childProjectID = @childProjectID
							
						exec dbo.USR_USP_CHILDREN_SETINELIGIBLE @ChildListIneligible, @waitingListMaximumQuotaReachedID, @changeAgentID				
	
						insert @ChildListIneligibleWithReason
						select sponsorshipOpportunityChildID, @waitingListMaximumQuotaReachedID from @ChildListIneligible
					end
				end
			end


			-- ** Had to use temp tables instead of just referencing the table vars because of permission issues when called from the business process
			-- ** The EXECUTE permission was denied on the object 'USR_UDT_CHILDIDLIST'

			-- Write Successes to Output table if it was specified
			if @successTableName <> ''
			begin
				select * into #registeredChildren from @ChildListToRegister
			    exec sp_executesql @insertSuccessSQL, @insertSuccessSQLParms, @projectID=@childProjectID, @countryID=NULL--, @ChildList=@ChildListToRegister
				drop table #registeredChildren 
			end
			
			-- Write exceptions to Output table if it was specified
			if @exceptionTableName <> ''	
			begin
				select * into #ineligibleChildren from @ChildListIneligibleWithReason
			    exec sp_executesql @insertExceptionsSQL, @insertExceptionsSQLParm, @projectID=@childProjectID, @countryID=NULL--, @childList=@ChildListIneligibleWithReason
				drop table #ineligibleChildren 
			end

			
			-- Unlock project
			exec dbo.USR_USP_DELETEBATCHLOCK @childProjectID, @changeAgentUserName

			
		end
		
		fetch next from waitingListCursor 
		into @childProjectID

	end
	

	close waitingListCursor
	deallocate waitingListCursor


	if @successTableName <> ''
		exec sp_executesql @countSuccessSQL, @countSuccessSQLParms, @successCount=@successCount output
	
	if @exceptionTableName <> ''
		exec sp_executesql @countExceptionSQL, @countExceptionSQLParms, @exceptionCount=@exceptionCount output

	select quotaType, objectID from @lockFailed 					   

	return 0

end

		]]>
	</CreateProcedureSQL>
	
</SQLStoredProcedureSpec>
