<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="4ddf611a-e53f-4e90-8c41-649b18dfeb2d"
	Name="USR_USP_SPONSORSHIPOPPORTUNITYELIGIBILITY_NEEDCURRENTPHOTOINCRM"
	Description="Used to add/delete 'Need current photo in CRM' pending reasons."
	Author="Cary Mayeda"
		SPName="USR_USP_SPONSORSHIPOPPORTUNITYELIGIBILITY_NEEDCURRENTPHOTOINCRM"
	>
	<!-- 
	Remarks:	The 'Need current photo in CRM' pending reason is added to the child/children if the attachment type of "Child Photo - Full Body - Current" is missing
				or if the attachment type of "Child Photo - Headshot - Current" is missing.
	
				This is called from USR_USP_SPONSORSHIPOPPORTUNITYELIGIBILITYCHECK, which is used by both the Sponsorship Opportunity Eligibility Check record operation 	
				and with the Sponsorship Opportunity Eligibility Business Process.  
				
	History:
	Date			Modified By		Comments
    30-Sep-2012		CMayeda			Initial Version	
	13-Oct-2012		CMayeda			Changed pending reason to 'Need current photo in CRM'
	28-Aug-2015		Memphis			Updated raiserror call: raiserror(@errorMessageMultipleCurrentHeadshotAttachmentsNotfound,16,1);
-->
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_SPONSORSHIPOPPORTUNITYELIGIBILITY_NEEDCURRENTPHOTOINCRM (
	@childIDList dbo.USR_UDT_CHILDIDLIST readonly,	-- The children to be made eligible or pending
	@changeAgentID uniqueidentifier,				-- Used to specify change agent for CHANGEDBYID and ADDEDBYID fields
	@deletedRows int = 0 output,					-- Output parm that specifies how many pending reasons were deleted
	@insertedRows int = 0 output					-- Output parm that specifies how many pending reasons were inserted
)
as begin

	-- Eligibility code value constants
	declare @eligibilityCode_Pending tinyint = 0
	declare @eligibilityCode_Eligible tinyint = 1
	declare @eligibilityCode_Ineligible tinyint = 2

	declare @reasonTypeCode_ChildMarkPendingEligibility tinyint = 0  -- Child Mark Pending Eligibiltiy sponsorship reason enum 

	declare @sponsorshipReason_NeedCurrentPhotoInCRM nvarchar(100) = 'Need current photo in CRM'
	declare @errorMessageNeedCurrentPhotoInCRMNotfound nvarchar(500) = 'Couldn''t find the "' + @sponsorshipReason_NeedCurrentPhotoInCRM + '" Sponsorship Reason'	

	-- Get ChangeAgent if none was passed into the sproc
  	if @CHANGEAGENTID is null  
	    exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output

    -- Used for setting date fields to today's date
	declare @CurrentDate datetime = null  
	set @CurrentDate = getdate()	
	
		
	begin try
	    -- These are required for the sproc to work correctly, so we need to throw an exception if the IDs aren't found	
		declare @needCurrentPhotoInCRMID uniqueidentifier
		select @needCurrentPhotoInCRMID = ID from dbo.SPONSORSHIPREASON where lower (REASON) = lower (@sponsorshipReason_NeedCurrentPhotoInCRM) and REASONTYPECODE = @reasonTypeCode_ChildMarkPendingEligibility
		if @needCurrentPhotoInCRMID is null
			raiserror(@errorMessageNeedCurrentPhotoInCRMNotfound,16,1);
			

		declare @childPhotoFullBodyCurrentAttachmentTypeID uniqueidentifier
		select @childPhotoFullBodyCurrentAttachmentTypeID = ID from dbo.SPROPPATTACHMENTTYPECODE where lower (DESCRIPTION) = lower ('Child Photo - Full Body - Current')
		if @childPhotoFullBodyCurrentAttachmentTypeID is null
			raiserror('Couldn''t find the "Child Photo - Full Body - Current" sponsorship attachement type code',16,1);
			

		declare @childPhotoHeadshotCurrentAttachmentTypeID uniqueidentifier
		select @childPhotoHeadshotCurrentAttachmentTypeID = ID from dbo.SPROPPATTACHMENTTYPECODE where lower (DESCRIPTION) = lower ('Child Photo - Headshot - Current')
		if @childPhotoHeadshotCurrentAttachmentTypeID is null
			raiserror('Couldn''t find the "Child Photo - Headshot - Current" sponsorship attachement type code',16,1);
			
    

	end try
	begin catch
	    exec dbo.USP_RAISE_ERROR
		return 1	
	end catch
	
	-- This needs to be set to off for the output parms to be set properly
	set nocount off
	
	
	
	
	-- Remove 'Need current photo in CRM' pending reasons if both current child photos exist for the child/children
	delete	dbo.SPONSORSHIPOPPORTUNITYREASON
	  from	dbo.SPONSORSHIPOPPORTUNITYREASON so_reason
	 where	-- Find children who are specified to be reviewed and have the 'Need current photo in CRM' pending reason 
			exists (select SPONSORSHIPOPPORTUNITYCHILDID from @childIDList where SPONSORSHIPOPPORTUNITYCHILDID = so_reason.SPONSORSHIPOPPORTUNITYID )

	   and	so_reason.SPONSORSHIPREASONID = @needCurrentPhotoInCRMID
	 
			-- Check if a both current photos exist
	   and	exists (select SPONSORSHIPOPPORTUNITYID 
				      from dbo.SPONSORSHIPOPPORTUNITYATTACHMENT so_attach
	 			     where so_attach.SPONSORSHIPOPPORTUNITYID = so_reason.SPONSORSHIPOPPORTUNITYID
					   and so_attach.SPROPPATTACHMENTTYPECODEID = @childPhotoFullBodyCurrentAttachmentTypeID )
	   and	exists (select SPONSORSHIPOPPORTUNITYID 
				      from dbo.SPONSORSHIPOPPORTUNITYATTACHMENT so_attach
	 			     where so_attach.SPONSORSHIPOPPORTUNITYID = so_reason.SPONSORSHIPOPPORTUNITYID
					   and so_attach.SPROPPATTACHMENTTYPECODEID =  @childPhotoHeadshotCurrentAttachmentTypeID )
					   						
	set @DELETEDROWS = @@ROWCOUNT
	
	
	-- Insert 'Need current photo in CRM' pending reasons if the child/children don't already have it and they are missing either current photo
	insert dbo.SPONSORSHIPOPPORTUNITYREASON
				(SPONSORSHIPOPPORTUNITYID,
				 SPONSORSHIPREASONID,				
				 ADDEDBYID, 
				 CHANGEDBYID, 
				 DATEADDED, 
				 DATECHANGED)
				 
		select  ID,
				@needCurrentPhotoInCRMID, 
				@CHANGEAGENTID, 
				@CHANGEAGENTID, 
				@CurrentDate, 
				@CurrentDate
		  from	dbo.SPONSORSHIPOPPORTUNITY so
		
		 where	exists (select SPONSORSHIPOPPORTUNITYCHILDID from @childIDList where SPONSORSHIPOPPORTUNITYCHILDID = so.ID )

				-- Verify that the child/children don't already have a 'Need current photo in CRM' pending reason.
	       and	not exists (Select SPONSORSHIPOPPORTUNITYID from SPONSORSHIPOPPORTUNITYREASON so_reason 
		                    where so_reason.SPONSORSHIPOPPORTUNITYID = so.ID and so_reason.SPONSORSHIPREASONID = @needCurrentPhotoInCRMID)
	      		  
				-- Check if either current photos does not exist
		   and	((not exists 
					(select SPONSORSHIPOPPORTUNITYID 
				       from dbo.SPONSORSHIPOPPORTUNITYATTACHMENT so_attach
	 			      where so_attach.SPONSORSHIPOPPORTUNITYID = so.ID
					    and so_attach.SPROPPATTACHMENTTYPECODEID = @childPhotoFullBodyCurrentAttachmentTypeID ))
				or 
				(not exists 
					(select SPONSORSHIPOPPORTUNITYID 
				       from dbo.SPONSORSHIPOPPORTUNITYATTACHMENT so_attach
	 			      where so_attach.SPONSORSHIPOPPORTUNITYID = so.ID
					    and so_attach.SPROPPATTACHMENTTYPECODEID =  @childPhotoHeadshotCurrentAttachmentTypeID )))

				-- Don't add to ineligible kids that are not quota waiting list
		   and	(so.ELIGIBILITYCODE in (@eligibilityCode_Pending, @eligibilityCode_Eligible)
		        or (so.ELIGIBILITYCODE = @eligibilityCode_Ineligible
				    and exists (select sponsorshipReasonID from dbo.USR_UFN_CHILDQUOTA_GETWAITINGLISTREASONS() wl_reasons where so.SPONSORSHIPREASONID = wl_reasons.sponsorshipReasonID)))

	set @INSERTEDROWS = @@ROWCOUNT
	
	return 0
end


		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
