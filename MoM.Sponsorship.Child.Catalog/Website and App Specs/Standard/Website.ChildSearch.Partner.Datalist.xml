<DataListSpec
	xmlns="bb_appfx_datalist"
	xmlns:common="bb_appfx_commontypes"
	ID="5ECB50D7-01C2-4487-8B34-1ECCF6E4FF5B"
	Name="Website Church Partner Child Search Data List"
	Description="This is the data list used by the website to get available children for a specific church partner"
	Author="Cary Mayeda"
	common:SecurityUIFolder="Website">
    <!-- 
	Remarks:    

	History:
	Date            Modified By     Comments
	22-Sep-2014		CMayeda			Initial Version - Copied from App Child Search Data List (App.ChildSearch.Datalist.xml) and removed not needed results
	01-Jun-2015		CMayeda			Added Add a Child Campaign
	05-Jun-2015		CMayeda			Changed addolder to include 'Pending' children.
									Added general check, so if you do not specify a valid partner id, it returns 0 rows.
-->

	<!-- define the SP that returns the data for the datalist -->
	<SPDataList SPName="USR_USP_DATALIST_WEBSITE_GETAVAILABLECHILDRENFORPARTNER">
		<common:CreateProcedureSQL>
			<![CDATA[
create procedure dbo.USR_USP_DATALIST_WEBSITE_GETAVAILABLECHILDRENFORPARTNER( 
	@PARTNERLOOKUPID nvarchar(25),  -- Partner Constituent Lookup ID
	@GENDER nvarchar(25),
    @AGEMIN nvarchar(10),
	@AGEMAX nvarchar(10),
	@COUNTRY nvarchar(25)

)
as
begin

    set @GENDER = nullif(@GENDER, '');
-- ** NEED TO CONVERT TO INTEGER	
    set @AGEMIN = nullif(@AGEMIN, '');	
    set @AGEMAX = nullif(@AGEMAX, '');
    set @COUNTRY = nullif(@COUNTRY, '');

	if lower(@PARTNERLOOKUPID) = 'addyounger'
	begin
		;with ChildList as
		(
		select top 500 
			so.ID,
			so_child.FIRSTNAME,
			so_child.LASTNAME,
			so_child.FIRSTNAME + ' ' + so_child.LASTNAME AS FULLNAME,
			countryconst.KEYNAME as COUNTRYNAME,
			countryconst.ID as COUNTRYID,
			so_child.AGE,
			SUBSTRING(so_child.BIRTHDATE,5,2) + '/' + SUBSTRING(so_child.BIRTHDATE,7,2) + '/' + SUBSTRING(so_child.BIRTHDATE,1,4)  as BIRTHDATE,
			CASE so_child.GENDER
				WHEN 'Female' THEN 'Girl'
				WHEN 'Male' THEN 'Boy'
			END AS GENDER,
			so_child.GENDERCODE,
			childprojectconst.KEYNAME as PROJECTNAME,
			childprojectconst.ID AS PROJECTID,
			so.LOOKUPID as CHILDNO,
			ELIGIBILITY,
			AVAILABILITY
		from	
			dbo.SPONSORSHIPOPPORTUNITY so
			inner join dbo.SPONSORSHIPLOCATION sloc on sloc.ID = so.SPONSORSHIPLOCATIONID
			inner join dbo.SPONSORSHIPOPPORTUNITYCHILD so_child on so_child.ID = so.ID
			--inner join dbo.SMARTFIELD0CEE2E20081D42CA9A9E87847970093F sf on sf.ID = so.ID   				-- Greatest Need Smart Field
			left outer join dbo.USR_CHILDPROJECTEXTENSION projectext on sloc.FIELDOFFICEID = projectext.ID
			left outer join dbo.CONSTITUENT childprojectconst on childprojectconst.ID = projectext.ID       -- This is the constituent record that has note of type "Project Bio"
			left outer join dbo.USR_COUNTRYEXTENSION countryext on projectext.COUNTRYEXTENSIONID = countryext.ID
			left outer join dbo.CONSTITUENT countryconst on countryconst.ID = countryext.ID        			-- This is the constituent record that has the note of type "Country Bio"
 
		where 
			RESERVATIONKEYID in (select ID from SPONSORSHIPOPPORTUNITYRESERVEPROCESS where NAME like 'Add-A-Child Campaign\Younger%')
		and ELIGIBILITY = 'Eligible'
		and AVAILABILITY = 'Reserved'
		)
	
		select * 
		from 
			ChildList
		where
			((@GENDER is null) or (GENDER = @GENDER))
		and ((@COUNTRY is null) or (upper(COUNTRYNAME) = upper(@COUNTRY)))
		and ((@AGEMIN is null) or (@AGEMAX is null) or (AGE >= @AGEMIN and AGE <= @AGEMAX))
		order by CHILDNO
	end
	else
	begin
		if lower(@PARTNERLOOKUPID) = 'addolder'
		begin
			;with ChildList as
			(
			select top 500 
				so.ID,
				so_child.FIRSTNAME,
				so_child.LASTNAME,
				so_child.FIRSTNAME + ' ' + so_child.LASTNAME AS FULLNAME,
				countryconst.KEYNAME as COUNTRYNAME,
				countryconst.ID as COUNTRYID,
				so_child.AGE,
				SUBSTRING(so_child.BIRTHDATE,5,2) + '/' + SUBSTRING(so_child.BIRTHDATE,7,2) + '/' + SUBSTRING(so_child.BIRTHDATE,1,4)  as BIRTHDATE,
				CASE so_child.GENDER
					WHEN 'Female' THEN 'Girl'
					WHEN 'Male' THEN 'Boy'
				END AS GENDER,
				so_child.GENDERCODE,
				childprojectconst.KEYNAME as PROJECTNAME,
				childprojectconst.ID AS PROJECTID,
				so.LOOKUPID as CHILDNO,
				ELIGIBILITY,
				AVAILABILITY
			from	
				dbo.SPONSORSHIPOPPORTUNITY so
				inner join dbo.SPONSORSHIPLOCATION sloc on sloc.ID = so.SPONSORSHIPLOCATIONID
				inner join dbo.SPONSORSHIPOPPORTUNITYCHILD so_child on so_child.ID = so.ID
				--inner join dbo.SMARTFIELD0CEE2E20081D42CA9A9E87847970093F sf on sf.ID = so.ID   				-- Greatest Need Smart Field
				left outer join dbo.USR_CHILDPROJECTEXTENSION projectext on sloc.FIELDOFFICEID = projectext.ID
				left outer join dbo.CONSTITUENT childprojectconst on childprojectconst.ID = projectext.ID       -- This is the constituent record that has note of type "Project Bio"
				left outer join dbo.USR_COUNTRYEXTENSION countryext on projectext.COUNTRYEXTENSIONID = countryext.ID
				left outer join dbo.CONSTITUENT countryconst on countryconst.ID = countryext.ID        			-- This is the constituent record that has the note of type "Country Bio"
	 
			where 
				RESERVATIONKEYID in (select ID from SPONSORSHIPOPPORTUNITYRESERVEPROCESS where NAME like 'Add-A-Child Campaign\Older%')
			and ELIGIBILITY in ('Eligible', 'Pending')
			and AVAILABILITY = 'Reserved'
			)
		
			select * 
			from 
				ChildList
			where
				((@GENDER is null) or (GENDER = @GENDER))
			and ((@COUNTRY is null) or (upper(COUNTRYNAME) = upper(@COUNTRY)))
			and ((@AGEMIN is null) or (@AGEMAX is null) or (AGE >= @AGEMIN and AGE <= @AGEMAX))
			order by CHILDNO
		end
		else
		begin
			if lower(@PARTNERLOOKUPID) = 'general'
			begin
				;with ChildList as
				(
				select top 500 
					so.ID,
					so_child.FIRSTNAME,
					so_child.LASTNAME,
					so_child.FIRSTNAME + ' ' + so_child.LASTNAME AS FULLNAME,
					countryconst.KEYNAME as COUNTRYNAME,
					countryconst.ID as COUNTRYID,
					so_child.AGE,
					SUBSTRING(so_child.BIRTHDATE,5,2) + '/' + SUBSTRING(so_child.BIRTHDATE,7,2) + '/' + SUBSTRING(so_child.BIRTHDATE,1,4)  as BIRTHDATE,
					CASE so_child.GENDER
						WHEN 'Female' THEN 'Girl'
						WHEN 'Male' THEN 'Boy'
					END AS GENDER,
					so_child.GENDERCODE,
					childprojectconst.KEYNAME as PROJECTNAME,
					childprojectconst.ID AS PROJECTID,
					so.LOOKUPID as CHILDNO,
					ELIGIBILITY,
					AVAILABILITY
				from	
					dbo.SPONSORSHIPOPPORTUNITY so
					inner join dbo.SPONSORSHIPLOCATION sloc on sloc.ID = so.SPONSORSHIPLOCATIONID
					inner join dbo.SPONSORSHIPOPPORTUNITYCHILD so_child on so_child.ID = so.ID
					--inner join dbo.SMARTFIELD0CEE2E20081D42CA9A9E87847970093F sf on sf.ID = so.ID   				-- Greatest Need Smart Field
					left outer join dbo.USR_CHILDPROJECTEXTENSION projectext on sloc.FIELDOFFICEID = projectext.ID
					left outer join dbo.CONSTITUENT childprojectconst on childprojectconst.ID = projectext.ID       -- This is the constituent record that has note of type "Project Bio"
					left outer join dbo.USR_COUNTRYEXTENSION countryext on projectext.COUNTRYEXTENSIONID = countryext.ID
					left outer join dbo.CONSTITUENT countryconst on countryconst.ID = countryext.ID        			-- This is the constituent record that has the note of type "Country Bio"
	 
				where 
					RESERVATIONKEYID in (select ID from SPONSORSHIPOPPORTUNITYRESERVEPROCESS where NAME in ('Website', 'Website A', 'Website B', 'Website C', 'Website D', 'Website E', 'Website F', 'Website G', 'Website H', 'Website I', 'Website J'))
				and ELIGIBILITY = 'Eligible'
				and AVAILABILITY = 'Reserved'
				)
		
				select * 
				from 
					ChildList
				where
					((@GENDER is null) or (GENDER = @GENDER))
				and ((@COUNTRY is null) or (upper(COUNTRYNAME) = upper(@COUNTRY)))
				and ((@AGEMIN is null) or (@AGEMAX is null) or (AGE >= @AGEMIN and AGE <= @AGEMAX))
				order by CHILDNO
			end
			else
			begin
				if lower(@PARTNERLOOKUPID) = 'i5church'
				begin
					;with ChildList as
					(
					select top 500 
						so.ID,
						so_child.FIRSTNAME,
						so_child.LASTNAME,
						so_child.FIRSTNAME + ' ' + so_child.LASTNAME AS FULLNAME,
						countryconst.KEYNAME as COUNTRYNAME,
						countryconst.ID as COUNTRYID,
						so_child.AGE,
						SUBSTRING(so_child.BIRTHDATE,5,2) + '/' + SUBSTRING(so_child.BIRTHDATE,7,2) + '/' + SUBSTRING(so_child.BIRTHDATE,1,4)  as BIRTHDATE,
						CASE so_child.GENDER
							WHEN 'Female' THEN 'Girl'
							WHEN 'Male' THEN 'Boy'
						END AS GENDER,
						so_child.GENDERCODE,
						childprojectconst.KEYNAME as PROJECTNAME,
						childprojectconst.ID AS PROJECTID,
						so.LOOKUPID as CHILDNO,
						ELIGIBILITY,
						AVAILABILITY
					from	
						dbo.SPONSORSHIPOPPORTUNITY so
						inner join dbo.SPONSORSHIPLOCATION sloc on sloc.ID = so.SPONSORSHIPLOCATIONID
						inner join dbo.SPONSORSHIPOPPORTUNITYCHILD so_child on so_child.ID = so.ID
						--inner join dbo.SMARTFIELD0CEE2E20081D42CA9A9E87847970093F sf on sf.ID = so.ID   				-- Greatest Need Smart Field
						left outer join dbo.USR_CHILDPROJECTEXTENSION projectext on sloc.FIELDOFFICEID = projectext.ID
						left outer join dbo.CONSTITUENT childprojectconst on childprojectconst.ID = projectext.ID       -- This is the constituent record that has note of type "Project Bio"
						left outer join dbo.USR_COUNTRYEXTENSION countryext on projectext.COUNTRYEXTENSIONID = countryext.ID
						left outer join dbo.CONSTITUENT countryconst on countryconst.ID = countryext.ID        			-- This is the constituent record that has the note of type "Country Bio"
		 
					where 
					(RESERVATIONKEYID in (select ID from SPONSORSHIPOPPORTUNITYRESERVEPROCESS where NAME like 'Partner Web\i5%')
						 or (RESERVATIONKEYID in (select ID from SPONSORSHIPOPPORTUNITYRESERVEPROCESS where NAME in ('Website', 'Website B', 'Website C', 'Website D', 'Website E', 'Website F', 'Website G', 'Website H', 'Website I', 'Website J'))
							 and childprojectconst.LOOKUPID in ('HN-025', 'IN-251', 'KE-032', 'PH-002')
							)
					)
				--        so.RESERVATIONKEYID in (select 
				--									rp.ID
				--                         		from 
				--									dbo.SPONSORSHIPOPPORTUNITYRESERVEPROCESS rp
				--                         			join dbo.USR_PARTNERCHURCHRESERVATIONS p on p.ReservationKeyID = rp.ID
				--									join dbo.CONSTITUENT pc on pc.ID = p.partnerconstituentid
				--                          		where 
				--									pc.LOOKUPID = @PARTNERLOOKUPID )
					and ELIGIBILITY = 'Eligible'
					and AVAILABILITY = 'Reserved'
					)
			
					select * 
					from 
						ChildList
					where
						((@GENDER is null) or (GENDER = @GENDER))
					and ((@COUNTRY is null) or (upper(COUNTRYNAME) = upper(@COUNTRY)))
					and ((@AGEMIN is null) or (@AGEMAX is null) or (AGE >= @AGEMIN and AGE <= @AGEMAX))
					order by CHILDNO
				end
			end
		end
	end
end

	]]>
		</common:CreateProcedureSQL>
	</SPDataList>

	<!-- describe the context ID parameter for the SP (if applicable)-->
	<Context ContextRecordType="Church Partner" RecordIDParameter="PARTNERLOOKUPID"/>

	<!-- describe any parameters (other than the context ID) defined on the SP -->
	<Parameters>

		<common:FormMetaData>
			<common:FormFields>
				<common:FormField FieldID="GENDER" Caption="Gender" DataType="String"/>
				<common:FormField FieldID="AGEMIN" Caption="Minimum Age" DataType="String"/>
				<common:FormField FieldID="AGEMAX" Caption="Maximum Age" DataType="String"/>
				<common:FormField FieldID="COUNTRY" Caption="Country" DataType="String"/>
			</common:FormFields>
		</common:FormMetaData>
	</Parameters>

	<!-- define the output fields in the list -->
	<Output>
		<OutputFields>
				<OutputField FieldID="ID" Caption="System record ID" DataType ="Guid"/>
				<OutputField FieldID="FIRSTNAME" Caption="First Name" DataType="String" />
				<OutputField FieldID="LASTNAME" Caption="Last Name" DataType="String" />
				<OutputField FieldID="FULLNAME" Caption="Full Name" DataType="String" />
				<OutputField FieldID="COUNTRYNAME" Caption="Country Name" DataType="String" />
				<OutputField FieldID="COUNTRYID" Caption="Country ID" DataType="Guid"/>
				<OutputField FieldID="AGE" Caption="Age" DataType="TinyInt"/>
				<OutputField FieldID="BIRTHDATE" Caption="Birthdate" DataType="String"/>
				<OutputField FieldID="GENDER" Caption="Gender" DataType="String"  />
				<OutputField FieldID="GENDERCODE" Caption="Gender Code" DataType="TinyInt" />
				<OutputField FieldID="PROJECTNAME" Caption="Project Name"  DataType="String"/>
				<OutputField FieldID="PROJECTID" Caption="Project ID" DataType="Guid" />
				<OutputField FieldID="CHILDNO" Caption="Child Number" DataType="String" />
				<OutputField FieldID="ELIGIBILITY" Caption="Eligibility" DataType="String"/>
				<OutputField FieldID="AVAILABILITY" Caption="Availability" DataType="String"/>

		</OutputFields>
	</Output>

</DataListSpec>
